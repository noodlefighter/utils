#!/usr/bin/env python
#-*- coding:utf-8 -*-

"""
refers:
- https://scons.org/doc/2.4.1/HTML/scons-user.html

如用于交叉编译，请提供以下变量:
CC, CXX, AS, AR, CFLAGS, CXXFLAGS, LDFLAGS
"""

import os
import subprocess

def parese_and_merge_flags(the_env, flags):
    d = the_env.ParseFlags(flags)
    the_env.MergeFlags(d)

def parse_pkg_configs(the_env, pkgname, default=None):
    result = subprocess.Popen("pkg-config %s --cflags --libs" % pkgname, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
    result.wait()
    val = result.stdout.readline().decode().strip()
    if result.returncode == 0: # OK
        print("found pkg %s, use params: %s" % (pkgname, val))
        parese_and_merge_flags(the_env, val)
    elif default is not None:
        print("pkg-config %s not found, use default params: %s" % (pkgname, default))
        parese_and_merge_flags(the_env, default)
    else:
        print("no pkg-config or default params for %s, exit!" % pkgname)
        Exit(1)

def print_env_var(env, var):
    if var in env.Dictionary().items():
        print(var+":", env[var])

env = Environment(ENV = {'PATH' : os.environ['PATH']})
proj_dir = os.getcwd()
print('workspace path:{0}'.format(proj_dir))

# terminal彩色打印
if 'TERM' in os.environ.keys():
    env['ENV']['TERM'] = os.environ['TERM']

# 全局编译参数
def load_external_var(env, var, alter=None):
    var_name = var
    if alter is not None:
        var_name = alter

    if var_name not in env.Dictionary().items():
        env.Append(var_name = [])

    if var in os.environ.keys():
        print("Accept extern var %s: %s" % (var, os.environ[var]))
        env[var_name] = os.environ[var]
    else:
        print("no {0} in extern var, skip...", var)

env.Append(CCFLAGS = ['-std=c++11'])
env.Append(CPPPATH = [])
load_external_var(env, "CC")
load_external_var(env, "CXX")
load_external_var(env, "AS")
load_external_var(env, "AR")
load_external_var(env, "CFLAGS")
load_external_var(env, "CXXFLAGS")
load_external_var(env, "LDFLAGS", "LINKFLAGS")
load_external_var(env, "RANLIB")

# 全局依赖库
incs = [
    'game_inc',
    'controllers',
    'src',
    'extension',
    'extension/inja',
]

libs = [
    'pthread',
    'dl',
    'event',
    'event_pthreads',
    'asound',
]


abs_headers = []
for item in incs:
    abs_item = os.path.join(proj_dir, item)
    abs_headers.append(abs_item)

# 编译脚本使用的全局变量
build_dir = os.path.join(proj_dir, 'build')
libs_dir  = os.path.join(build_dir, 'lib')
env["proj_dir"]  = proj_dir
env["build_dir"] = build_dir
env["libs_dir"]  = libs_dir
env["incs"]      = abs_headers

env.Append(LIBS = libs)
env.Append(LIBPATH = [libs_dir])

# 全局库依赖
parse_pkg_configs(env, 'log4c', '-llog4c')
parse_pkg_configs(env, 'fcgi', '-lfcgi')
parse_pkg_configs(env, 'libavcodec')
parse_pkg_configs(env, 'libavutil')
parse_pkg_configs(env, 'libswresample')
parse_pkg_configs(env, 'libavformat')

# 调试
debug = ARGUMENTS.get('DEBUG', 0)
if int(debug):
    env.Append(CCFLAGS = '-g')

print("golbal default env:")
print_env_var(env, "CC")
print_env_var(env, "CXX")
print_env_var(env, "AS")
print_env_var(env, "AR")
print_env_var(env, "CFLAGS")
print_env_var(env, "CCFLAGS")
print_env_var(env, "CXXFLAGS")
print_env_var(env, "LINKFLAGS")
print_env_var(env, "CPPPATH")

Export('env')

# 分模块编译
print("begin load SConscript")
SConscript('./src/SConScript')
SConscript('./controllers/SConScript')
SConscript('./entrances/SConScript')
SConscript('./src/platform/SConScript')
print("\n Parse Done, Please Check {0}".format(env['build_dir']))
